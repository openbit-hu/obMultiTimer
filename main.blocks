<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="4!YRRvRLvflKn+|beRW4" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="jP*`*34c2D}oK#?NH6Cg" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Timer{" line1="    id:string" line2="    dt:number" line3="    t0:number" line4="    timerCallback:()=&gt;void" line5="    constructor(id:string,dt:number,body:()=&gt;void){" line6="        this.id=id" line7="        this.dt=dt" line8="        this.timerCallback=body" line9="    }" line10="    start(millis:number){" line11="        this.t0=millis" line12="    }" line13="    check(t:number){" line14="        if(t-this.t0&gt;this.dt){" line15="            this.timerCallback()" line16="            this.t0=t" line17="        }" line18="    }" line19="}" numlines="20"></mutation><next><block type="typescript_statement" id="=}D{B`Ai9a+b,j|lCxgY" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace obMultiTimer {" line1="    let timers:Timer[]=[]" line2="    let minDt:number=1000" line3="    let res:number=200" line4="    let t0:number" line5="    //% blockId=&quot;obTimer_start&quot;" line6="    //% block=&quot;start Timer event || in every $time ms with $resolution ms accuracy&quot;" line7="    export function start(resolution?:number){" line8="        if(resolution)res=resolution" line9="//        if(resolution&gt;dt/2)resolution=dt/2" line10="        t0=control.millis()" line11="        for(let timer of timers){" line12="            timer.start(t0)" line13="        }" line14="        control.inBackground(function () {" line15="            while(true){" line16="                basic.pause(res)" line17="                let t1=control.millis()" line18="                for(let timer2 of timers){" line19="                    timer2.check(t1)" line20="                }" line21="            }" line22="        })" line23="    }" line24="    /**" line25="     * Attaches code to run when the timer triggers an event." line26="     * @param id name of the timer" line27="     * @param dt time difference between calls" line28="     * @param body TODO" line29="     */" line30="    //% blockId=&quot;obTimer_onTimerEvent&quot;" line31="    //% block=&quot;onTimerEvent&quot;" line32="    export function onTimerEvent(id:string, dt:number, body: () =&gt; void): void {" line33="        if(dt&lt;100)dt=100" line34="        if(dt&lt;minDt){" line35="            minDt=dt" line36="            res=minDt/2" line37="        }" line38="        timers.push(new Timer(id,dt,body))" line39="    }" line40="}" numlines="41"></mutation></block></next></block></statement></block></xml>